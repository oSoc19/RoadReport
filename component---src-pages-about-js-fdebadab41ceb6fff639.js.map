{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/webWork.js","webpack:///./src/components/workText.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","_contact_module_css__WEBPACK_IMPORTED_MODULE_6__","_contact_module_css__WEBPACK_IMPORTED_MODULE_6___default","IndexPage","a","createElement","title","keywords","className","contactStyle","container","greet","intro","d","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","data","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","arrayOf","header","react_default","headerStyles","logo","linkContainer","gatsby_browser_entry","link","to","Layout","Fragment","_755544856","node","_webWork_module_css__WEBPACK_IMPORTED_MODULE_1__","_webWork_module_css__WEBPACK_IMPORTED_MODULE_1___default","WebWork","console","log","image1","WebWorkStyles","work","style","backgroundImage","image2","WorkText","textContainer","text","tech","btnStyle","href","github"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,GAAAN,EAAA,KAAAA,EAAA,MAAAO,GAAAP,EAAA,KAAAA,EAAA,KAAAA,EAAA,MAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAAK,EAAAG,GAsBeE,UAZG,kBAChBN,EAAAO,EAAAC,cAACN,EAAA,EAAD,KACEF,EAAAO,EAAAC,cAACL,EAAA,EAAD,CAAKM,MAAM,OAAOC,SAAU,0CAC5BV,EAAAO,EAAAC,cAAA,WAASG,UAAU,SACjBX,EAAAO,EAAAC,cAAA,OAAKG,UAAWC,IAAaC,WAC3Bb,EAAAO,EAAAC,cAAA,MAAIG,UAAWC,IAAaE,OAA5B,YACAd,EAAAO,EAAAC,cAAA,KAAGG,UAAWC,IAAaG,OAA3B,gsBChBRnB,EAAAoB,EAAAlB,EAAA,sBAAAmB,IAAA,IAAAlB,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAmB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAAK,EAAAiB,GAAAE,EAAAxB,EAAA,IAAAyB,EAAAzB,EAAAK,EAAAmB,GAAAxB,EAAAoB,EAAAlB,EAAA,sBAAAuB,EAAAd,IAAAX,EAAA,SAYM0B,EAAqBC,IAAMC,cAAc,IAEzCP,EAAc,SAAAQ,GAAK,OACvBzB,EAAAO,EAAAC,cAACc,EAAmBI,SAApB,KACG,SAAAC,GACC,OACEF,EAAMG,MACLD,EAAgBF,EAAMI,QAAUF,EAAgBF,EAAMI,OAAOD,MAEtDH,EAAMK,QAAUL,EAAMM,UAC5BN,EAAMG,KAAOH,EAAMG,KAAKA,KAAOD,EAAgBF,EAAMI,OAAOD,MAGvD5B,EAAAO,EAAAC,cAAA,uCA4BfS,EAAYe,UAAY,CACtBJ,KAAMK,IAAUC,OAChBL,MAAOI,IAAUE,OAAOC,WACxBN,OAAQG,IAAUI,KAClBN,SAAUE,IAAUI,2BCzDtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,6LCMzCK,EAAmB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIEvB,IAAMf,cAAc0C,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,OANV,MAUXV,EAAiBX,UAAY,CAC3Ba,SAAUZ,IAAUqB,MAAM,CACxBL,SAAUhB,IAAUE,OAAOC,aAC1BA,YAGUO,6GCbf,SAASY,EAATX,GAA2D,IAA5CY,EAA4CZ,EAA5CY,YAAaC,EAA+Bb,EAA/Ba,KAAMC,EAAyBd,EAAzBc,KAAMhD,EAAmBkC,EAAnBlC,SAAUD,EAASmC,EAATnC,MACxCkD,EADiDC,EAAAhC,KACjD+B,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACEO,EAAAxD,EAAAC,cAACwD,EAAAzD,EAAD,CACE0D,eAAgB,CACdR,QAEFhD,MAAOA,EACPyD,cAAa,QAAUP,EAAKG,aAAarD,MACzCiD,KAAM,CACJ,CACES,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAS3D,GAEX,CACE4D,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAAST,EAAKG,aAAaQ,QAE7B,CACEH,KAAI,gBACJC,QAAS3D,GAEX,CACE0D,KAAI,sBACJC,QAASP,IAGVU,OACC7D,EAAS8D,OAAS,EACd,CACEL,KAAI,WACJC,QAAS1D,EAAS+D,KAAT,OAEX,IAELF,OAAOb,KAKhBH,EAAImB,aAAe,CACjBjB,KAAI,KACJC,KAAM,GACNhD,SAAU,GACV8C,YAAW,IAGbD,EAAIvB,UAAY,CACdwB,YAAavB,IAAUE,OACvBsB,KAAMxB,IAAUE,OAChBuB,KAAMzB,IAAU0C,QAAQ1C,IAAUC,QAClCxB,SAAUuB,IAAU0C,QAAQ1C,IAAUE,QACtC1B,MAAOwB,IAAUE,OAAOC,YAGXmB,6YC7FDqB,EAAA,kBACZC,EAAAtE,EAAAC,cAAA,cACEqE,EAAAtE,EAAAC,cAAA,OAAKG,UAAWmE,IAAajE,WAC7BgE,EAAAtE,EAAAC,cAAA,MAAIG,UAAWmE,IAAaC,MAA5B,iBACEF,EAAAtE,EAAAC,cAAA,OAAKG,UAAWmE,IAAaE,eAC3BH,EAAAtE,EAAAC,cAACyE,EAAA,EAAD,CAAMtE,UAAWmE,IAAaI,KAAMC,GAAG,KAAvC,QACAN,EAAAtE,EAAAC,cAACyE,EAAA,EAAD,CAAMtE,UAAWmE,IAAaI,KAAMC,GAAG,YAAvC,WACAN,EAAAtE,EAAAC,cAACyE,EAAA,EAAD,CAAMtE,UAAWmE,IAAaI,KAAMC,GAAG,UAAvC,aCCFC,EAAS,SAAAxC,GAAA,IAAGb,EAAHa,EAAGb,SAAH,OACb8C,EAAAtE,EAAAC,cAACyE,EAAA,EAAD,CACEpD,MAAK,YASLC,OAAQ,SAAAF,GAAI,OACViD,EAAAtE,EAAAC,cAAAqE,EAAAtE,EAAA8E,SAAA,KACER,EAAAtE,EAAAC,cAACoE,EAAD,MACEC,EAAAtE,EAAAC,cAAA,YAAOuB,KAbfH,KAAA0D,KAmBFF,EAAOpD,UAAY,CACjBD,SAAUE,IAAUsD,KAAKnD,YAGZgD,wCCrCf,IAAArF,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAyF,EAAA5F,EAAA,KAAA6F,EAAA7F,EAAAK,EAAAuF,GAceE,IAVf,SAAiBjE,GAEf,OADAkE,QAAQC,IAAInE,EAAMoE,QAElB7F,EAAAO,EAAAC,cAAA,OAAKG,UAAWmF,IAAcjF,WAC5Bb,EAAAO,EAAAC,cAAA,OAAKG,UAAWmF,IAAcC,KAAMC,MAAO,CAACC,gBAAe,OAASxE,EAAMoE,OAAf,OAC3D7F,EAAAO,EAAAC,cAAA,OAAKG,UAAWmF,IAAcC,KAAMC,MAAO,CAACC,gBAAe,OAASxE,EAAMyE,OAAf,2CCT/D,IAAAnG,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAyF,EAAA5F,EAAA,KAAA6F,EAAA7F,EAAAK,EAAAuF,GAgBeW,IAZf,SAAkB1E,GAChB,OACAzB,EAAAO,EAAAC,cAAA,OAAKG,UAAWmF,IAAcM,eAC5BpG,EAAAO,EAAAC,cAAA,MAAIG,UAAWmF,IAAcrF,OAAQgB,EAAMhB,OAC3CT,EAAAO,EAAAC,cAAA,KAAGG,UAAWmF,IAAcO,MAAO5E,EAAMV,OACzCf,EAAAO,EAAAC,cAAA,KAAGG,UAAWmF,IAAcO,MAAO5E,EAAM+B,aACzCxD,EAAAO,EAAAC,cAAA,KAAGG,UAAWmF,IAAcO,MAAO5E,EAAM6E,MACzCtG,EAAAO,EAAAC,cAAA,KAAGG,UAAWc,EAAM8E,SAAUC,KAAM/E,EAAMgF,QAA1C","file":"component---src-pages-about-js-fdebadab41ceb6fff639.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport WebWork from \"../components/webWork\"\nimport WorkText from \"../components/workText\"\nimport SEO from \"../components/seo\"\n\nimport contactStyle from \"./contact.module.css\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`Jan Temmerman`, `portfolio`, `contact`]} />\n    <section className=\"first\">\n      <div className={contactStyle.container}>\n        <h1 className={contactStyle.greet}>About Me</h1>\n        <p className={contactStyle.intro}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nec varius orci. Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus at euismod lorem. Aliquam ac ultrices nisl. Quisque lacinia justo odio. Quisque ullamcorper sem non sapien congue semper. Aliquam pharetra tincidunt dolor eget dignissim. Nunc convallis, nunc et pretium laoreet, risus magna posuere quam, id porta dui nisl mollis enim. Quisque eget volutpat risus. In semper eu nisl sed varius. Nam laoreet, eros sed iaculis pulvinar, leo tortor tempus sapien, ac congue nunc lorem sed magna. In vehicula tristique euismod. Pellentesque fringilla pellentesque leo eu porttitor.</p>\n      </div>\n    </section>\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport React from \"react\"\n\nimport headerStyles from \"./header.module.css\"\n\nexport default() => (\n  <header>\n    <div className={headerStyles.container}>\n    <h1 className={headerStyles.logo}>JAN TEMMERMAN</h1>\n      <div className={headerStyles.linkContainer}>\n        <Link className={headerStyles.link} to=\"/\">Home</Link>\n        <Link className={headerStyles.link} to=\"/contact\">Contact</Link>\n        <Link className={headerStyles.link} to=\"/about\">About</Link>\n      </div>\n    </div>\n  </header>\n) \n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"../components/header\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header/>\n          <main>{children}</main>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nimport WebWorkStyles from \"./webWork.module.css\"\n\nfunction WebWork(props) {\n  console.log(props.image1);\n  return(\n  <div className={WebWorkStyles.container}>\n    <div className={WebWorkStyles.work} style={{backgroundImage: `url(${props.image1})`}}></div>\n    <div className={WebWorkStyles.work} style={{backgroundImage: `url(${props.image2})`}}></div>\n  </div>\n  )\n}\n\nexport default WebWork\n","import React from \"react\"\n\nimport WebWorkStyles from \"./webWork.module.css\"\n\nfunction WorkText(props) {\n  return(\n  <div className={WebWorkStyles.textContainer}>\n    <h1 className={WebWorkStyles.title}>{props.title}</h1>\n    <p className={WebWorkStyles.text}>{props.intro}</p>\n    <p className={WebWorkStyles.text}>{props.description}</p>\n    <p className={WebWorkStyles.text}>{props.tech}</p>\n    <a className={props.btnStyle} href={props.github}>View on Github</a>\n  </div>\n  )\n}\n\nexport default WorkText\n"],"sourceRoot":""}